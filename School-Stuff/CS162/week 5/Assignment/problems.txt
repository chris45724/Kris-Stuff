3)  Car Class
    Write a class named Car that has the following member variables:
    yearModel—an int that holds the car’s year model
    make—a string that holds the make of the car
    speed—an int that holds the car’s current speed
    In addition, the class should have the following constructor and other member functions:
    Constructor—The constructor should accept the car’s year model and make as arguments. These values should be assigned to the object’s yearModel and make member variables. The constructor should also assign 0 to the speed member variables.
    Accessor—appropriate accessor functions to get the values stored in an object’s yearModel, make, and speed member variables
    accelerate—The accelerate function should add 5 to the speed member variable each time it is called.
    brake—The brake function should subtract 5 from the speed member variable each time it is called.
    Demonstrate the class in a program that creates a Car object, then calls the accelerate function five times. After each call to the accelerate function, get the current speed of the car and display it. Then, call the brake function five times. After each call to the brake function, get the current speed of the car and display it.




8)Circle Class
  	Write a Circle class that has the following member variables:
    
    radius — a double
   	pi — a double initialized with the value 3.14159
    
    The class should have the following member functions:
    	Default Constructor—a default constructor that sets radius to 0.0
    	
    	Constructor—accepts the radius of the circle as an argument 
    	
    	setRadius—a mutator function for the radius variable 
    	
    	getRadius—an accessor function for the radius variable 
    	
    	getArea—returns the area of the circle, which is calculated as
    	
    	area = pi * radius * radius
     
     		getDiameter—returns the diameter of the circle, which is calculated as

    		diameter = radius * 2
     	
     	getCircumference—returns the circumference of the circle, which is calculated as 
    
    		circumference = 2 * pi * radius

    Write a program that demonstrates the Circle class by asking the user for the circle’s radius, creating a Circle object, then reporting the circle’s area, diameter, and circumference.





10)    Number Array Class
    Design a class that has an array of floating-point numbers. The constructor should accept an integer argument and dynamically allocate the array to hold that many numbers. The destructor should free the memory held by the array. In addition, there should be member functions to perform the following operations:
    
    Store a number in any element of the array

    Retrieve a number from any element of the array
    
    Return the highest value stored in the array
    
    Return the lowest value stored in the array
    
    Return the average of all the numbers stored in the array
    
    Demonstrate the class in a program.


12)Coin Toss Simulator
    Write a class named Coin. The Coin class should have the following member variable:

    A string named sideUp. The sideUp member variable will hold either “heads” or “tails” indicating the side of the coin that is facing up.
    The Coin class should have the following member functions:
    
    A default constructor that randomly determines the side of the coin that is facing up (“heads” or “tails”) and initializes the sideUp member variable accordingly.
    
    A void member function named toss that simulates the tossing of the coin. When the toss member function is called, it randomly determines the side of the coin that is facing up (“heads” or “tails”) and sets the sideUp member variable accordingly.
    
    A member function named getSideUp that returns the value of the sideUp member variable.
    
    Write a program that demonstrates the Coin class. The program should create an instance of the class and display the side that is initially facing up. Then, use a loop to toss the coin 20 times. Each time the coin is tossed, display the side that is facing up.
    The program should keep count of the number of times heads is facing up and the number of times tails is facing up, and display those values after the loop finishes.
